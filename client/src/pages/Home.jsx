import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Card, FormField, Loader } from '../components';
import { toast } from 'react-toastify';

const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return data.map((post) => (
            <motion.div
            key={post._id}
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            >
                <Card {...post} />
            </motion.div>
        ));
    }

    return (
        <motion.h2
        className="mt-5 font-bold text-indigo-600 text-xl uppercase tracking-wider"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        >
            {title}
        </motion.h2>
    );
};

const Home = () => {

    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);
    const [searchText, setSearchText] = useState('');
    const [searchTimeout, setSearchTimeout] = useState(null);
    const [searchedResults, setSearchedResults] = useState(null);

    const fetchPosts = async () => {
        setLoading(true);
        try {
            const response = await fetch('http://localhost:8080/api/v1/post', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            });
            if (response.ok) {
                const result = await response.json();
                setAllPosts(result.data.reverse());
            }
        } catch (err) {
            toast.error(`Error ${err}`);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchPosts();
    }, []);

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout);
        setSearchText(e.target.value);
        setSearchTimeout(
            setTimeout(() => {
                const searchResult = allPosts.filter(
                    (item) =>
                        item.name.toLowerCase().includes(searchText.toLowerCase()) ||
                        item.prompt.toLowerCase().includes(searchText.toLowerCase())
                );
                setSearchedResults(searchResult);
            }, 500)
        );
    };

    return (
        <section className="max-w-7xl mx-auto px-4 sm:px-8">
            <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            >
                <h1 className="font-extrabold text-transparent text-4xl sm:text-5xl bg-clip-text bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">
                    The Community Showcase
                </h1>
                <p className="mt-3 text-gray-600 text-[15px] sm:text-[16px] max-w-[600px] leading-relaxed">
                Browse through a collection of imaginative and visually stunning images generated by DALLÂ·E AI
                </p>
            </motion.div>

            <motion.div
            className="mt-12"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.6 }}
            >
                <FormField
                labelName="Search posts"
                type="text"
                name="text"
                placeholder="Search something..."
                value={searchText}
                handleChange={handleSearchChange}
                className="shadow-lg rounded-xl border border-gray-200 focus:ring-2 focus:ring-indigo-400 transition-all"
                />
            </motion.div>

            <div className="mt-10">
                {loading ? (
                    <div className="flex justify-center items-center">
                        <Loader />
                    </div>
                ) : (
                    <>
                        {searchText && (
                            <motion.h2
                            className="font-medium text-gray-600 text-xl mb-5"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            >
                                Showing Results for <span className="text-indigo-600 font-semibold">{searchText}</span>:
                            </motion.h2>
                        )}

                        <motion.div
                        className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-6"
                        initial="hidden"
                        animate="show"
                        variants={{
                            hidden: {},
                            show: { transition: { staggerChildren: 0.1 } },
                        }}
                        >
                            {searchText ? (
                                <RenderCards data={searchedResults} title="No Search Results Found" />
                            ) : (
                                <RenderCards data={allPosts} title="No Posts Yet" />
                            )}
                        </motion.div>
                    </>
                )}
            </div>
        </section>
    );
};

export default Home;